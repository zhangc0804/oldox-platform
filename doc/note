2018-01-11
1、springboot的安装
可以直接将jar包添加到classpath，也可以通过maven管理，推荐使用maven管理。
<!-- Inherit defaults from Spring Boot -->
<parent>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-parent</artifactId>
	<version>1.5.4.RELEASE</version>
</parent>
<!-- Add typical dependencies for a web application -->
<dependencies>
	<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-web</artifactId>
	</dependency>
</dependencies>
<!-- Package as an executable jar -->
<build>
	<plugins>
		<plugin>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-maven-plugin</artifactId>
		</plugin>
	</plugins>
</build>

2、springboot应用启动
可以直接运行main方法或者通过maven启动：mvn spring-boot:run

2018-01-19
构建系统：
1、依赖管理
每一个SpringBoot版本依赖了一个Spring框架版本，因此，不应该覆盖Spring框架版本

2、Maven
spring-boot-starter-parent工程提供了以下特性：
JDK默认使用1.6
源码编码默认为UTF-8
提供了一个Dependency Management片段，因此可以省略<version>版本号
智能化地资源文件过滤，如自动扫描配置文件application.properties、application.yml
配置文件默认使用Spring风格的占位符${}

3、修改Java版本
<properties>
	<java.version>1.8</java.version>
</properties>

4、使用SpringBoot的maven插件
<build>
	<plugins>
		<plugin>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-maven-plugin</artifactId>
		</plugin>
	</plugins>
</build>
该插件可以将SpringBoot项目打包成一个可以执行的jar文件

5、启动器（Starters）
所有官方的启动器都是以spring-boot-starter开头，所有非官方的启动器都不是以spring-boot-starter开头


组织代码：
以下是代码结构的一些最佳实践：
1、不使用默认包
默认包就是没有包声明，使用默认包可能会产生一些问题

2、将主类放在包含其他类的根路径下，如下就是一个典型的项目结构：
com
	+- example
		+- myproject
			+- Application.java
			|
			+- domain
			| 	+- Customer.java
			| 	+- CustomerRepository.java
			|
			+- service
			| 	+- CustomerService.java
			|
			+- web
				+- CustomerController.java
				
				
配置类：
SpringBoot支持XML配置，但是它更喜欢基于Java的配置。任何时候应该优先考虑基于Java的配置。
1、导入额外的配置：
不需要将所有的配置放到一个@Configuration类里，可以通过使用@Import注解添加额外的配置。作为选择，还可以使用
@ComponentScan注解扫描Spring组件，这些组件包含@Configuration注解类。
2、导入XML配置：
如果不得不使用XML配置，仍然可以通过@Configuration类启动，同时使用@ImportReasource注解

2018-01-20
自动配置
1、可以通过使用@EnableAutoConfiguration或者@SpringBootApplication注解添加自动配置功能
最佳实践：应该永远只添加一个@EnableAutoConfiguration注解，最好是放到主@Configuration类里

2、覆盖自动配置
自动配置时非侵入式的，任何时候，都可以添加自己的配置来覆盖默认的自动配置。比如，当添加一个DataBase Bean时，
默认的内嵌DataBase将不起作用。

可以在启动的时候添加--debug查看相关信息：spring-boot:run --debug

3、禁止指定的自动配置
可以通过使用@EnableAutoConfiguration注解的exclude属性禁止指定的自动配置，例如：
@Configuration
@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})
public class MyConfiguration {
}
如果类不在classpath下，可以使用excludeName属性，此时需要指定类的全路径名

2018-01-29
Spring bean和依赖注入
1、如果代码结构使用的是推荐的结构，只需在主类上使用@ComponentScan注解，则@Controller、@Service、
@Repository、@Component等注解会被自动扫描

2、依赖注入可以通过构造器注入实现，如下所示：
@Service
public class DatabaseAccountService implements AccountService {
	private final RiskAssessor riskAssessor;
	@Autowired
	public DatabaseAccountService(RiskAssessor riskAssessor) {
		this.riskAssessor = riskAssessor;
	}
	// ...
}


使用@SpringBootApplication注解
@SpringBootApplication = @Configuration + @EnableAutoConfiguration + @ComponentScan

开发者工具
1、添加依赖
<dependencies>
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-devtools</artifactId>
		<optional>true</optional>
	</dependency>
</dependencies>

2、自动重启
使用devtools时，classpath路径下的文件改动会导致应用重启；

3、自动加载
以下路径下的文件改动不会导致应用重启，但是会导致文件的重加载：
/META-INFO/maven
/META-INFO/resources
/resources
/static
/public
/templates
如果要定制以上资源，可以在配置文件application.properties中指定以下属性：
spring.devtools.restart.exclude=static/**,public/**

4、禁用重启动
在配置文件application.properties中指定以下属性：
spring.devtools.restart.enabled = false
或者：
public static void main(String[] args) {
	System.setProperty("spring.devtools.restart.enabled", "false");
	SpringApplication.run(MyApp.class, args);
}