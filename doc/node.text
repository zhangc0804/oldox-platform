################################################################2018-02-02
1、基本框架搭建
1.1、添加springboot依赖
<!-- Inherit defaults from Spring Boot -->
  <parent>
  	<groupId>org.springframework.boot</groupId>
  	<artifactId>spring-boot-starter-parent</artifactId>
  	<version>1.5.4.RELEASE</version>
  </parent>
1.2、添加web依赖
<dependency>
    	<groupId>org.springframework.boot</groupId>
    	<artifactId>spring-boot-starter-web</artifactId>
    </dependency>
1.3、添加启动类
package com.oldox.platform;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}

}
1.4、添加dev-tool
<!-- Add the boot devtools -->
    <dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-devtools</artifactId>
		<optional>true</optional>
	</dependency>
1.5、添加h2数据库驱动
当满足以下条件时可以访问H2页面控制台：
a、是一个web工程
b、添加了h2的驱动jar包
c、使用了dev-tools

H2数据库页面控制台访问地址为：localhost:8080/h2-console/

1.6、添加swagger
1.6.1、添加swagger依赖
<!-- Add swagger2 -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>${swagger2.version}</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>${swagger2.version}</version>
		</dependency>
1.6.2、添加配置文件		
@Configuration
@EnableSwagger2
public class SwaggerConfig 
1.6.3、访问swagger页面
http://localhost:8080/swagger-ui.html


################################################################2018-02-05
Druid数据库连接池
1、添加maven依赖
		<!-- Add Alibaba druid database connection pool -->
		<dependency>
		    <groupId>com.alibaba</groupId>
		    <artifactId>druid</artifactId>
		    <version>${druid.version}</version>
		</dependency>

2、添加配置文件
@Configuration
public class DatabaseConfig implements EnvironmentAware

3、编写资源配置文件（参考“数据库连接池配置”）
application.properties

4、配置监控统计拦截的filters
		// try {
		// druidDataSource.setFilters(environment.getProperty("spring.database.filters",DatabaseConfig.SPRING_DATABASE_DEFAULT_FILTERS));
		// } catch (SQLException e) {
		// e.printStackTrace();
		// }
		
		//filters和proxyFilters属性是组合关系的，不是替换的
		List<Filter> filters = new ArrayList<Filter>();
		filters.add(wallFilter());
		filters.add(statFilter());
		druidDataSource.setProxyFilters(filters);
		
5、配置StatViewServlet
	@Bean
	public ServletRegistrationBean druidStatViewServlet() {
	
6、配置WebStatFilter
	@Bean
	public FilterRegistrationBean druidWebStatFilter(){
	
################################################################2018-02-06
整合Mybatis

1、添加maven依赖
		<!-- Add mybatis-spring-boot-starter -->
		<dependency>
		    <groupId>org.mybatis.spring.boot</groupId>
		    <artifactId>mybatis-spring-boot-starter</artifactId>
		    <version>1.3.1</version>
		</dependency>
该依赖会自动执行以下操作：	
a、自动检测已经存在的DataSource
b、使用步骤a检测到的DataSource自动创建并注册一个SqlSessionFactory实例
c、自动创建并注册一个SqlSessionTemplate，该实例从SqlSessionFactory获得
d、自动扫描Mapper，并关联他们到SqlSessionTemplate，同时注册到spring上下文中，以便可以直接注入到自己的bean中

2、编写Mapper
@Mapper
public interface UserMapper {
	
	@Select("select * from user where id= #{id}")
	public User queryById(@Param("id") Long id);

}

3、mybatis配置属性
MyBatis使用前缀“mybatis”
config-location   mybatis的XML配置文件位置	
check-config-location 	是否检查mybatis的XML配置文件是否存在
mapper-locations 	Mapper xml配置文件位置
type-aliases-package 	搜索类型别名所在的包，多个用逗号隔开
type-handlers-package 	搜索类型处理程序所在的包，多个用逗号隔开
executor-type 	Executor type: SIMPLE, REUSE, BATCH.
configuration-properties 	Externalized properties for MyBatis configuration. Specified properties can be used as placeholder on MyBatis config file and Mapper file. For detail see the MyBatis reference page
configuration 	A MyBatis Configuration bean. About available properties see the MyBatis reference page. NOTE This property cannot be used at the same time with the config-location. 

以下是一个示例：
# application.properties
mybatis.type-aliases-package=com.example.domain.model
mybatis.type-handlers-package=com.example.typehandler
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.configuration.default-fetch-size=100
mybatis.configuration.default-statement-timeout=30

################################################################2018-02-08
整合Shiro
1、添加依赖
		<!-- Add shiro-spring-boot-web-starter -->
		<dependency>
		    <groupId>org.apache.shiro</groupId>
		    <artifactId>shiro-spring-boot-web-starter</artifactId>
		    <version>1.4.0</version>
		</dependency>
		
2、编写Realm实现类
public class SystemAuthorizingRealm extends AuthorizingRealm 

3、将步骤2编写的Realm定义为bean
	@Bean
	public Realm realm(){
		return new SystemAuthorizingRealm();
	}

注意：返回类型为Realm，不能为具体实现类，否则启动时会报错
